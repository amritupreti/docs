{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":""},{"location":"DSA/patterns/","title":"Patterns","text":"<p>By patterns, I refer to common techniques or strategies used to solve problems in data structures and algorithms. These patterns help in recognizing problem types and applying appropriate solutions efficiently.</p>"},{"location":"DSA/patterns/#common-patterns","title":"Common Patterns","text":"<p>Here are frequently used patterns in data structures and algorithms.</p> <ol> <li>Prefix Sum</li> <li>Two Pointers</li> <li>Sliding Window</li> <li>Fast and Slow Pointers</li> <li>Linked List Inplace Reversal</li> <li>Monotonic Stack</li> <li>Top 'K' Elements</li> <li>Quick Select</li> <li>Overlapping Intervals</li> <li>Modified Binary Search</li> <li>Binary Tree Traversal</li> <li>Depth First Search (DFS)</li> <li>Breadth First Search (BFS)</li> <li>Matrix Traversal</li> <li>Backtracking</li> <li>Dynamic Programming</li> <li>Binary Search</li> </ol>"},{"location":"go/intro/","title":"Golang","text":"<p>Go is an attempt to combine the ease of programming of an interpreted, dynamically typed language with the efficiency and safety of a statically typed, compiled language. - <code>Go FAQ</code></p>"},{"location":"go/intro/#goals-of-go","title":"Goals of Go","text":"<ul> <li>Simplicity: Go aims to be simple and easy to learn, with a clean syntax.</li> <li>Efficiency: It is designed for high performance, with fast compilation and execution.</li> <li>Concurrency: Go has built-in support for concurrent programming, making it easy to write programs that can perform multiple tasks simultaneously.</li> <li>Robustness: Go emphasizes safety and reliability, with features like garbage collection and strong typing.</li> <li>Tooling: Go comes with a rich set of tools for formatting, testing, and managing dependencies.</li> </ul>"},{"location":"go/intro/#real-world-applications","title":"Real world applications","text":"<p>Go is widely used in various domains like infrastructure, cloud services, web development, and more. Some notable applications include:</p> <ul> <li>Docker: A platform for developing, shipping, and running applications in containers.</li> <li>Kubernetes: An open-source system for automating deployment, scaling, and management of containerized applications.</li> <li>Helm: A package manager for Kubernetes that helps in managing Kubernetes applications.</li> <li>Terraform: An open-source tool for building, changing, and versioning infrastructure safely and efficiently.</li> <li>Prometheus: A monitoring and alerting toolkit designed for reliability and scalability.</li> <li>gRPC: A high-performance, open-source RPC framework that uses HTTP/2 for transport and Protocol Buffers as the interface description language.</li> <li>Etcd: A distributed key-value store used for configuration management and service discovery.</li> <li>Other examples: Drone, CockroachDB, InfluxDB, Hugo, DropBox, CloudFlare, CoreOS(etcd, flannel), etc.</li> </ul>"},{"location":"go/intro/#hello-world-example","title":"Hello World Example","text":"main.go<pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(\"Hello, World!\")\n}\n</code></pre>"},{"location":"go/intro/#keywords-and-symbols","title":"Keywords and Symbols","text":"<p>Only 25 keywords are reserved in Go; don't use them as identifiers:</p> Keyword Description <code>break</code> Exits a loop or switch statement. <code>case</code> Defines a branch in a switch statement. <code>chan</code> Declares a channel type for communication. <code>const</code> Declares a constant value. <code>continue</code> Skips the current iteration of a loop. <code>default</code> Specifies the default case in a switch statement. <code>defer</code> Defers the execution of a function until the surrounding function returns. <code>else</code> Defines an alternative branch in an if statement. <code>fallthrough</code> Allows execution to continue to the next case in a switch statement. <code>for</code> Starts a loop. <code>func</code> Declares a function. <code>go</code> Starts a goroutine for concurrent execution. <code>goto</code> Jumps to a labeled statement. <code>if</code> Starts a conditional statement. <code>import</code> Imports packages for use in the program. <code>interface</code> Declares an interface type. <code>map</code> Declares a map type for key-value pairs. <code>package</code> Declares a package name for the file. <code>range</code> Iterates over elements in a collection. <code>return</code> Exits a function and optionally returns a value. <code>select</code> Waits on multiple channel operations. <code>struct</code> Declares a composite data type. <code>switch</code> Starts a switch statement for multiple conditions. <code>type</code> Declares a new type. <code>var</code> Declares a variable."},{"location":"go/intro/#symbolsoperators","title":"Symbols/Operators","text":"<p>Some common symbols and operators in Go:</p> Symbol Description <code>+, -, *, /, %</code> Arithmetic operators for addition, subtraction, multiplication, division, and modulus. <code>&amp;, |, ^, &lt;&lt;, &gt;&gt;, &amp;^</code> Bitwise operators for AND, OR, XOR, left shift, right shift, and AND NOT. <code>&amp;=, |=, ^=, &lt;&lt;=, &gt;&gt;=, &amp;^=</code> Assignment operators for bitwise operations. <code>==, !=, &lt;, &lt;=, &gt;, &gt;=</code> Comparison operators for equality, inequality, and relational comparisons. <code>&amp;&amp;, ||, !</code> Logical operators for AND, OR, and NOT. <code>=, :=</code> Assignment operators; <code>=</code> for assigning values to variables, <code>:=</code> for short variable declaration. <code>++, --</code> Increment and decrement operators. <code>&lt;-</code> Channel operator for sending and receiving values."},{"location":"go/intro/#basic-types","title":"Basic Types","text":"<p>Go has several built-in types, including:</p> <ul> <li>Boolean: <code>bool</code> - Represents true or false values.</li> <li>Numeric: Includes integers (<code>int</code>, <code>int8</code>, <code>int16</code>, <code>int32</code>, <code>int64</code>), unsigned integers (<code>uint</code>, <code>uint8</code>, <code>uint16</code>, <code>uint32</code>, <code>uint64</code>), and floating-point numbers (<code>float32</code>, <code>float64</code>).</li> <li>String: <code>string</code> - Represents a sequence of characters.</li> <li>Complex: <code>complex64</code>, <code>complex128</code> - Represents complex numbers with real and imaginary parts.</li> <li>Array: A fixed-size sequence of elements of the same type.</li> <li>Slice: A dynamically-sized, flexible view into the elements of an array.</li> <li>Map: A collection of key-value pairs, where keys are unique.</li> <li>Struct: A composite type that groups together variables (fields) under a single name.</li> <li>Interface: A type that specifies a contract for methods that a type must implement.</li> </ul> basic_types.go<pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\n    // Declare variables\n    var x int = 10\n    var y float64 = 20.5\n    var name string = \"Go Language\"\n\n    // Print values\n    fmt.Println(\"Integer:\", x)\n    fmt.Println(\"Float:\", y)\n    fmt.Println(\"String:\", name)\n\n    // Basic arithmetic operations\n    sum := x + int(y) // Convert float to int for addition\n    fmt.Println(\"Sum:\", sum)\n}\n</code></pre> <p>Notes</p> <ul> <li><code>bool</code><ul> <li>(boolean) has two values: <code>true</code> and <code>false</code>.</li> <li>These values are not convertible to/from integers.</li> </ul> </li> <li><code>error</code>:<ul> <li>A special type with one function, <code>Error() string</code></li> <li>An error may be nil or non-nil</li> </ul> </li> <li><code>pointers</code>: <ul> <li>Pointers are physical addresses, logically opaque</li> <li>A pointer may be nil or non-nil</li> <li>No pointer manipulation except through package <code>unsafe</code></li> </ul> </li> </ul>"},{"location":"go/intro/#declarations","title":"Declarations","text":"declarations.go<pre><code>package main\n\n// Anywhere\nvar a int\nvar (\n    b = 42\n    c = \"Hello, Go\"\n    d, e = 3.14, true\n)\n\n// Inside a function\nfunc main() {\n    var f int = 10\n    g := 20.3\n    fmt.Printf(\"f: %8T %v\\n\", f, f)\n    fmt.Printf(\"g: %8T %[1]v\\n\", g)\n}\n</code></pre>"},{"location":"go/intro/#initialization","title":"Initialization","text":"<p>Go intialzies all variables to <code>zero</code> value of their type by default if you don't.</p>"},{"location":"go/intro/#zero-values","title":"Zero Values","text":"<ul> <li>All numberical types get 0 (<code>float</code> 0.0, <code>complex</code> 0i)</li> <li><code>bool</code> gets <code>false</code></li> <li><code>string</code> gets <code>\"\"</code> (empty string, length 0)</li> <li>Everything else gets <code>nil</code>:<ul> <li><code>pointers</code></li> <li><code>slices</code></li> <li><code>maps</code></li> <li><code>channels</code></li> <li><code>functions(function variables)</code></li> <li><code>interfaces</code></li> </ul> </li> <li>For aggregate types, all members get their <code>zero</code> values.</li> </ul>"},{"location":"go/intro/#constants","title":"Constants","text":"<ul> <li>Only numbers, strings, and booleans can be contants (immutable).</li> <li>Constant can be a literal or a compile-time function of a constant</li> </ul> constants.go<pre><code>const (\n    a = 1\n    b = 4 * 12\n    c = b &lt;&lt; 2 // Shift left by 2 bits\n\n    d = \"Hello, World!\"\n    e = len(d) // Length of the string\n\n    f = true\n    g = 3.14 // Pi value\n    h uint8 = 0xFF\n\n    // i = d[2:] // SYNTAX ERROR: can't do complicated string operations\n)\n</code></pre>"},{"location":"go/intro/#comments","title":"Comments","text":"<p>Go supports two types of comments:</p> <ul> <li>Single-line comments: Start with <code>//</code> and continue to the end of the line.</li> <li>Multi-line comments: Enclosed between <code>/*</code> and <code>*/</code>, allowing for comments that span multiple lines.</li> </ul> comments.go<pre><code>// This is a single-line comment\n\n/*\nThis is a multi-line comment\nIt can span multiple lines\n*/\n</code></pre>"},{"location":"go/intro/#strings","title":"Strings","text":"<p>Types related to strings: - <code>byte</code>: a synonym for uint8 - <code>rune</code>: a synonym for int32, represents a Unicode code point - <code>string</code>: immutable sequence of <code>characters</code>     - physically a sequence of bytes (UTF-8 encoded)     - logically a sequence of (<code>unicode</code>) <code>runes</code></p> <p>Runes (characters) are enclosed in single quotes: <code>'a'</code></p> <p><code>Raw</code> strings use backticks quotes: <code>string with \"quotes\"</code> They also don't evalute escape sequences like <code>\\n</code> or <code>\\t</code>.</p> main.go<pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\n    // String literals\n    str1 := \"Hello, World!\" // Regular string\n    str2 := `This is a raw string literal.` // Raw string\n\n    // String concatenation\n    combined := str1 + \" \" + str2\n\n    // Print strings\n    fmt.Println(str1)\n    fmt.Println(str2)\n    fmt.Println(combined)\n\n    // Length of a string\n    fmt.Println(\"Length of str1:\", len(str1))\n}\n</code></pre>"},{"location":"go/intro/#string-structure","title":"String structure","text":"<ul> <li>The internal string representation is a pointer and a length</li> <li>Strings are immutable and can share the underlying storage</li> <li>Strings are passed by reference, thus they aren't copied</li> </ul> string_structure.go<pre><code>s := \"Hello, World!\"\nhello := s[:5] // \"Hello\"\nworld := s[7:] // \"World!\"\n</code></pre> <p>Note: In above example, <code>hello</code> and <code>world</code> share the same underlying storage as <code>s</code>, but they are not mutable. Any modification to <code>hello</code> or <code>world</code> will result in a new string being created.</p>"},{"location":"go/intro/#string-functions","title":"String functions","text":"<p>Package <code>strings</code> provides many useful functions for string manipulation:</p> string_functions.go<pre><code>package main\n\nimport (\n    \"fmt\"\n    \"strings\"\n)\n\nfunc main() {\n    str := \"Hello, World!\"\n\n    // Check if string contains a substring\n    fmt.Println(\"Contains 'World':\", strings.Contains(str, \"World\"))\n\n    // Count occurrences of a substring\n    fmt.Println(\"Count of 'o':\", strings.Count(str, \"o\"))\n\n    // Find the index of a substring\n    fmt.Println(\"Index of 'World':\", strings.Index(str, \"World\"))\n\n    // Replace a substring\n    replaced := strings.ReplaceAll(str, \"World\", \"Go\")\n    fmt.Println(\"Replaced string:\", replaced)\n\n    // Split a string into a slice\n    parts := strings.Split(str, \", \")\n    fmt.Println(\"Split parts:\", parts)\n\n    // Join a slice into a string\n    joined := strings.Join(parts, \" - \")\n    fmt.Println(\"Joined string:\", joined)\n}\n</code></pre>"},{"location":"go/intro/#string-find-and-replace-example","title":"String find and replace example","text":"string_find_replace.go<pre><code>package main\n\nimport (\n    \"buffio\"\n    \"fmt\"\n    \"os\"\n    \"strings\"\n)\n\nfunc main() {\n    my_string := `\n    John is a software engineer.\n    John loves coding in Go.\n    John also enjoys solving problems.\n    `\n\n    if len(os.Args) &lt; 3 {\n        fmt.Println(\"Usage: go run string_find_replace.go &lt;old&gt; &lt;new&gt;\")\n        return\n    }\n\n    old, new := os.Args[1], os.Args[2]\n    scan := bufio.NewScanner(os.Stdin)\n\n    fmt.Println(\"Enter text (Ctrl+D to end):\")\n    for scan.Scan() {\n        s := strings.Split(scan.Text(), old)\n        t := strings.Join(s, new)\n        fmt.Println(t)\n    }\n}\n</code></pre> sample_file.txt<pre><code>John is a software engineer.\nJohn loves coding in Go.\nJohn also enjoys solving problems.\n</code></pre> <pre><code>go run string_find_replace.go John Jane &lt; sample_file.txt\n</code></pre>"},{"location":"go/intro/#arrays-slices-and-maps","title":"Arrays, Slices, and Maps","text":"<ul> <li> <p>Arrays</p> <ul> <li>Fixed-size, homogeneous collections of elements.</li> <li>Example: <code>[5]int</code></li> </ul> </li> <li> <p>Slices</p> <ul> <li>Dynamic, flexible views into arrays.</li> <li>Can grow and shrink in size.</li> <li>Example: <code>[]int</code> (slice of integers)</li> </ul> </li> <li> <p>Maps</p> <ul> <li>Unordered collections of key-value pairs.</li> <li>Keys must be unique and of a comparable type.</li> <li>Example: <code>map[string]int</code> (map from string to int)</li> </ul> </li> </ul>"},{"location":"go/intro/#arrays","title":"Arrays","text":"<ul> <li>Array are typed by size, which is fixed at compile time.</li> <li>Arrays are passed by value, thus elements are copied.</li> </ul> arrays.go<pre><code>package main\n\nfunc main() {\n    var a [5]int                    // Array of 5 integers\n    var b [3]int = [3]int{1, 2, 3}  // Array with initial values\n    var c = [...]int{1, 2, 3, 4, 5} // Array with inferred size\n\n    var d [3]int\n    d = b // Elements are copied\n\n    var m = [...]int{1, 2, 3, 4, 5} // Array with inferred size\n    c = m                           // Type mismatch\n}\n</code></pre>"},{"location":"go/intro/#slices","title":"Slices","text":"<ul> <li>Slices have variable length, backed by some array; they are copied when they outgrow their backing array.</li> <li>Slices are passed by reference, thus elements are not copied, updating OK</li> </ul> slices.go<pre><code>package main\n\nfunc main() {\n    var a []int               // Slice of integers\n    b := []int{1, 2, 3}       // Slice with initial values\n\n    a = append(a, 1)          // append to nil, OK\n    b = append(b, 4)          // []int{1, 2, 3, 4}\n\n    a = b                     // overwrites a\n\n    d := make([]int, 5)       // []int{0, 0, 0, 0, 0}\n    e := a                    // same storage (alias)\n\n    e[0] == b[0]              // true, same storage\n}\n</code></pre>"},{"location":"go/intro/#array-vs-slice","title":"Array vs Slice","text":"<p>In Go, slices are most commonly used instead of arrays.</p> Array Slice Fixed size at compile time Dynamic size Passed by value Passed by reference Elements are copied Elements are not copied Comparable Not comparable Can be used as map keys Cannot be used as map keys --------------- Has <code>copy</code> and <code>append</code> functions Useful as <code>pseudo</code> constants Useful for function parameters"},{"location":"go/intro/#maps","title":"Maps","text":"<ul> <li>Maps are dictionaries: indexed by key, returning a value.</li> <li>We can read from a nil map, but cannot write to it.</li> <li>The type used for the key must be comparable, (<code>==</code>, <code>!=</code> operators) and the value can be any type.</li> </ul> maps.go<pre><code>package main\n\nfunc main() {\n    var m map[string]int          // nil map, no storage\n    n := make(map[string]int)     // empty map, storage allocated\n\n    a := n[\"hi\"]                  // returns 0, no panic\n    b := m[\"hi\"]                  // returns 0, no panic\n    n[\"hi\"] = 1                   // OK, write to non-nil map\n    // m[\"hi\"] = 42               // panic: cannot write to nil map\n\n    m = n                         // Ok, m now points to p's storage\n    m[\"hi\"]++                     // Increase value from 1 to 2\n    c := n[\"hi\"]                  // Returns 2, value for key \"hi\"\n}\n</code></pre> <p>Note: Maps can't be compared to one another; map can be compared to <code>nil</code> as a special case. map_comparison.go<pre><code>var m = map[string]int{\"a\": 1, \"b\": 2}\n\nvar n map[string]int\n\na := m == n         // Syntax error\nb := n == nil       // true, n is not nil\nd := len(m)         // 2, length of map m\ne := cap(m)         // type mismatch, cap() not defined for maps\n</code></pre></p>"},{"location":"go/intro/#map-lookup","title":"Map Lookup","text":"<ul> <li>Maps have a special two-result lookup function.</li> <li>The second result is a boolean indicating if the key exists in the map.</li> </ul> map_lookup.go<pre><code>package main\n\nfunc main() {\n    m := map[string]int{}               // non-nil but empty map\n\n    a := m[\"hi\"]                        // returns 0, no panic\n    b, ok := m[\"hi\"]                    // b = 0, ok = false (key not found)\n\n    m[\"hi\"]++                           // hi not present, so hi is added with its zero value and incremented to 1\n    c, ok := m[\"hi\"]                    // c = 1, ok = true\n    if v, ok := m[\"hi\"]; ok {\n        fmt.Println(\"Key 'hi' exists with value:\", v)\n    } else {\n        fmt.Println(\"Key 'hi' does not exist\")\n    }\n}\n</code></pre>"},{"location":"go/intro/#built-ins","title":"Built-ins","text":"<p>Each type has certain built-in functions</p> Function Type Description <code>len(s)</code> <code>string</code>, <code>array</code>, <code>slice</code>, <code>map</code> Returns length. <code>cap(s)</code> <code>slice</code>, <code>array</code>, <code>chan</code> Returns capacity. <code>new(T)</code> <code>T</code> Allocates zeroed <code>T</code>, returns pointer. <code>make(T, x)</code> <code>slice</code> Slice with len &amp; cap = <code>x</code>. <code>make(T, x, y)</code> <code>slice</code> Slice with len <code>x</code>, cap <code>y</code>. <code>copy(dst, src)</code> <code>slice</code> Copies <code>min(len(dst), len(src))</code> elements. <code>append(c, d)</code> <code>slice</code> Appends <code>d</code> to <code>c</code>, returns new slice. <code>make(T)</code> <code>map</code>, <code>chan</code> Creates empty map or channel. <code>make(T, x)</code> <code>map</code> Map with room for <code>x</code> items. <code>delete(m, key)</code> <code>map</code> Removes <code>key</code> from map <code>m</code>."},{"location":"go/intro/#make-nil-useful","title":"Make nil useful","text":"<p>Make the zero value useful. - Rob Pike</p> <ul> <li><code>nil</code> is a type of zero: it indicates the absence of something.</li> <li>Many built-ins are safe: len, cap, range</li> </ul> nil_useful.go<pre><code>package main\n\nfunc main() {\n    var s []int             // nil slice, no storage\n    var m map[string]int    // nil map, no storage\n\n    l := len(s)             // 0, safe to call on nil slice\n    c := cap(s)             // 0, safe to call on nil slice\n\n    i, ok := m[\"key\"]       // i = 0, ok = false, safe to call on nil map\n\n    for _, v := range s {   // safe to range over nil slice, no iteration\n        fmt.Println(v)      // won't execute\n    }\n}\n</code></pre>"},{"location":"go/intro/#control-statements-declarations-and-types","title":"Control Statements; Declarations and Types","text":"<p>Go has several control statements for flow control:</p> <ul> <li>if-else: Conditional execution.</li> <li>for: Looping construct.</li> <li>switch: Multi-way branching.</li> </ul>"},{"location":"go/intro/#if-else","title":"If-else","text":"if_else.go<pre><code>package main\n\nimport \"fmt\"\n\nfunc something() error {\n    return nil \n}\n\nfunc main() {\n    x := 10\n\n    // Basic if statement\n    if x &gt; 0 {\n        fmt.Println(\"x is positive\")\n    }\n\n    // If-else statement\n    if x &lt; 0 {\n        fmt.Println(\"x is negative\")\n    } else {\n        fmt.Println(\"x is non-negative\")\n    }\n\n    // If-else if-else statement\n    if x &lt; 0 {\n        fmt.Println(\"x is negative\")\n    } else if x == 0 {\n        fmt.Println(\"x is zero\")\n    } else {\n        fmt.Println(\"x is positive\")\n    }\n\n    // Short declaration\n    if err := something(); err != nil {\n        fmt.Println(\"Error:\", err)\n    } else {\n        fmt.Println(\"No error\")\n    }\n}\n</code></pre>"},{"location":"go/intro/#for-loop","title":"For Loop","text":"<ul> <li>The only loop construct in Go is the <code>for</code> loop.</li> <li>Three parts: initialization, condition, and post statement. <code>(all optional)</code></li> <li>Loop ends when the condition evaluates to false.</li> </ul> for_loop.go<pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\n    // Basic for loop\n    for i := 0; i &lt; 5; i++ {\n        fmt.Println(\"Iteration:\", i)\n    }\n\n    // While-like loop\n    j := 0\n    for j &lt; 5 {\n        fmt.Println(\"While-like iteration:\", j)\n        j++\n    }\n\n    // Infinite loop with break condition\n    k := 0\n    for {\n        if k &gt;= 5 {\n            break // Exit the loop\n        }\n        fmt.Println(\"Infinite loop iteration:\", k)\n        k++\n    }\n\n    // Range over a slice\n    slice := []string{\"a\", \"b\", \"c\"}\n    for index, value := range slice {\n        fmt.Printf(\"Index: %d, Value: %s\\n\", index, value)\n    }\n}\n</code></pre>"},{"location":"go/intro/#labels-and-loops","title":"Labels and loops","text":"<p>Sometimes we need to break or continue outer loops from within inner loops. <code>quadratic search</code> is a good example.</p> labeled_loops.go<pre><code>outer:\n    for k := range testItemsMap {           // keys\n        for _, v := range returnItems {     // values in list\n            if k == v {\n                continue outer              // Continue the outer loop\n            }\n        }\n\n        t.Errorf(\"Item %s not found in return items\", k)\n    }\n</code></pre>"},{"location":"go/intro/#switch","title":"Switch","text":"<ul> <li>It is a shortcut replacing a series of if-then statements.</li> <li>Alternatively may be empty and do not fall through (break is not required).</li> </ul> <p>Simple switch switch_statement.go<pre><code>switch a := f.Get(); a {\n    case 0, 1:\n        fmt.Println(\"Good\")\n    case 2, 3, 4, 5, 6:\n        fmt.Println(\"Bad\")\n    case 7, 8, 9:             // Intentionally left empty, no operations\n    default:\n        fmt.Println(\"Unknown\")\n}\n</code></pre></p> <p>Switch on true - Arbitrary comparisons may be made for an switch with no arguments.</p> switch_on_true.go<pre><code>a := 5\n\nswitch {\n    case a &lt; 0:\n        fmt.Println(\"Negative\")\n    case a == 0:\n        fmt.Println(\"Zero\")\n    case a &gt; 0 &amp;&amp; a &lt; 10:\n        fmt.Println(\"Positive and less than 10\")\n    default:\n        fmt.Println(\"Greater than or equal to 10\")\n}\n</code></pre>"},{"location":"go/intro/#package-level-declarations","title":"Package-level declarations","text":"<ul> <li>Can declare anything at package scope</li> <li>Can't use short declaration <code>:=</code> at package scope</li> <li>Package-level variables are initialized before <code>main()</code> runs package_declarations.go<pre><code>package main\n\nimport \"fmt\"\n\nvar (\n    a = 1\n    b = 2\n)\n\nfunc init() {\n    fmt.Println(\"Package-level init function\")\n    a = 3 // Can modify package-level variables\n}\n\nfunc main() {\n    fmt.Println(\"a:\", a) // Outputs: a: 3\n    fmt.Println(\"b:\", b) // Outputs: b: 2\n}\n</code></pre></li> </ul>"},{"location":"go/intro/#packages-control-visibility","title":"Packages control visibility","text":"<ul> <li>Every name that's capitalized is exported (public)</li> <li>Within a package, everything is visible across files</li> </ul> package_visibility.go<pre><code>package secrets\n\nfunc GetSecret(user string) (string, error) {\n    if validateUser(user) {\n        return generateSecret(user), nil // Calls an unexported function\n    }\n    return nil, fmt.Errorf(\"invalid user\")\n}\n\nfunc validateUser(user string) bool {\n    return user != \"\" // Unexported function, not visible outside this package\n}\n\nfunc generateSecret(user string) string {\n    return \"Super secret key for \" + user // Unexported function\n}\n</code></pre> <p>Note: <code>validateUser</code> and <code>generateSecret</code> are unexported functions but <code>GetSecret</code> is exported and can be called from other packages.</p>"},{"location":"go/intro/#imports","title":"Imports","text":"<ul> <li>Each source file must declare its package and imports.</li> <li>Only import what it needs; unused imports are an error.</li> <li>Generally, files of the same package is placed in the same directory.</li> <li>No cycles in imports, i.e., package A cannot import package B if B imports A.</li> </ul>"},{"location":"go/intro/#shadowing-short-declarations","title":"Shadowing short declarations","text":"<ul> <li>Short declarations <code>:=</code> can shadow variables in outer scopes. shadowing_short_declarations.go<pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\n    n, err := fmt.Println(\"Hello, World!\") \n\n    if _, err := fmt.Println(n); err != nil {\n        fmt.Println(\"Error:\", err)\n    }\n    // The above line shadows the outer 'err' variable\n    // The outer 'err' is still accessible here\n    fmt.Println(\"Outer err:\", err) // Outputs: Outer err:\n}\n</code></pre></li> </ul> <p>Note: Compile error -&gt; the first err is unused.</p>"},{"location":"go/intro/#structural-typing","title":"Structural typing","text":"<ul> <li>It's the same type if it has the same structure or behavior.</li> </ul> structural_typing.go<pre><code>a := [...]int{1, 2, 3} // Array of integers\nb := []int{1, 2, 3}     // Slice of integers\n</code></pre>"},{"location":"go/intro/#named-typing","title":"Named typing","text":"<ul> <li>It's the only the same type if it has the same declared type name</li> </ul> named_typing.go<pre><code>type MyInt int\n\nfunc main() {\n    var a MyInt\n\n    b := 12\n\n    a = b // type mismatch\n    a = 12 // OK, 12 is an int literal\n    a = MyInt(b) // OK, type conversion\n}\n</code></pre>"},{"location":"haproxy/haproxy/","title":"HAProxy","text":"<p>HAProxy is a open-source project written in C that provides high availability, <code>layer 4</code> and <code>layer 7</code> load balancing and proxying.</p>"},{"location":"haproxy/haproxy/#architecture","title":"Architecture","text":"<ul> <li>Frontend: Anything in front of HAProxy that sends requests to it.<ul> <li>Timeout client</li> <li>Bind to IP and port</li> <li>Access Control List (ACL)</li> </ul> </li> <li>Backend: Anything behind HAProxy that receives requests from it.<ul> <li>Timeout connect</li> <li>Timeout server</li> <li>Balance algorithm (roundrobin, leastconn, source, etc.)</li> </ul> </li> </ul>"},{"location":"haproxy/haproxy/#haproxy-modes-tcp-and-http","title":"HAProxy Modes (<code>tcp</code> and <code>http</code>)","text":"<ul> <li>TCP Mode:<ul> <li>Operates at the transport layer <code>(Layer 4)</code>.</li> <li>Can handle raw TCP connections.</li> <li>Example: Load balancing MySQL or Redis databases.</li> </ul> </li> <li>HTTP Mode:<ul> <li>Operates at the application layer <code>(Layer 7)</code>.</li> <li>Can inspect and manipulate HTTP headers.</li> <li>Example: Load balancing web servers, caching, SSL termination.</li> </ul> </li> </ul> <p>Note: <code>http</code> mode is often slower than <code>tcp</code> mode due to the additional overhead of parsing HTTP headers, but it provides more features like content switching and header manipulation.</p>"},{"location":"haproxy/haproxy/#access-control-lists-acls","title":"Access Control Lists (ACLs)","text":"<p>ACLs are used to define rules for routing requests based on specific criteria.</p> <ul> <li>Applies to both frontend and backend configurations.</li> <li>Can be used to match based on:<ul> <li>Source IP address</li> <li>HTTP headers</li> <li>URL paths</li> </ul> </li> <li>Re-route traffic based on ACLs to different backends or apply specific actions.</li> </ul>"},{"location":"haproxy/haproxy/#tls-termination-vs-tls-passthrough","title":"TLS Termination vs TLS Passthrough","text":"<ul> <li> <p>TLS Termination:</p> <ul> <li>HAProxy decrypts incoming TLS traffic.</li> <li>This allows it to inspect and modify requests before forwarding them to the backend in plain text.</li> <li>Enables features such as header manipulation and <code>Layer 7 ACLs</code>.</li> <li>Requires a TLS certificate to be configured on HAProxy.</li> </ul> </li> <li> <p>TLS Passthrough:</p> <ul> <li>HAProxy forwards the encrypted TLS traffic directly to the backend without decrypting it.</li> <li>Backend servers must handle TLS termination.</li> <li>Proxy the packets as-is, without inspecting or modifying them.</li> <li>No caching, <code>L4 ACLs only</code>, but more secure, it doesn't need a TLS certificate on HAProxy.</li> </ul> </li> </ul>"},{"location":"haproxy/haproxy/#load-balancing-algorithms","title":"Load Balancing Algorithms","text":"<p>Load balancing algorithms determine how requests are distributed among backend servers. Some common algorithms include:</p> <ul> <li> <p>Round Robin: <code>balance roundrobin</code> </p> <ul> <li>Default algorithm in HAProxy.</li> <li>Distributes requests sequentially across all available servers.</li> <li>Example: Let's say, we have 3 servers <code>(S1, S2, S3)</code>, then the request sequence will be <code>S1 -&gt; S2 -&gt; S3 -&gt; S1 -&gt; S2</code>, and so on.</li> </ul> </li> <li> <p>Least Connections: <code>balance leastconn</code></p> <ul> <li>Directs traffic to the server with the fewest active connections.</li> <li>Useful for servers with varying processing capabilities.</li> </ul> </li> <li> <p>Source IP Hash: <code>balance source</code></p> <ul> <li>Routes requests from the same client IP to the same backend server.</li> <li>Useful for session persistence <code>(sticky sessions)</code>.</li> </ul> </li> </ul>"},{"location":"haproxy/haproxy/#simple-example-using-docker","title":"Simple Example Using Docker","text":"<p>Source code: https://github.com/amritupreti/haproxy_docker</p> <p>Please refer to the source code for a complete example. Feel free to leave a star if you find it useful.</p>"},{"location":"haproxy/haproxy/#project-structure","title":"Project Structure","text":"haproxy_docker<pre><code>\u251c\u2500\u2500 docker-compose.yml\n\u251c\u2500\u2500 haproxy/\n\u2502   \u2514\u2500\u2500 haproxy.cfg\n\u2514\u2500\u2500 server/\n    \u251c\u2500\u2500 app.py\n    \u251c\u2500\u2500 Dockerfile\n    \u251c\u2500\u2500 .dockerignore\n    \u2514\u2500\u2500 requirements.txt\n</code></pre>"},{"location":"haproxy/haproxy/#create-fastapi-server","title":"Create FastAPI Server","text":"<p>I'm using fastapi as a simple web server to demonstrate the load balancing.</p> <ol> <li> <p>Create a directory for the project: <pre><code>mkdir haproxy_docker\ncd haproxy_docker\n</code></pre></p> </li> <li> <p>Create server: <pre><code># Make directory for server\nmkdir server\ncd server\n\n# Make isolated python environment\nvirtualenv venv\nsource venv/bin/activate\n\n# Install fastapi and save requirements\npip install \"fastapi[standard]\"\npip freeze &gt; requirements.txt\n\n# Create app.py and files for docker\ntouch app.py\ntouch Dockerfile\ntouch .dockerignore\n</code></pre></p> </li> <li> <p>Add the following content to <code>app.py</code>: <pre><code>import os\nfrom fastapi import FastAPI, APIRouter\n\nserver_name = os.getenv(\"SERVER_NAME\", \"default_server\")\n\nrouter = APIRouter()\n@router.get(\"/\")\nasync def home():\n    return f\"{server_name}: Home page!\"\n\n@router.get(\"/admin\")\nasync def admin():\n    return f\"{server_name}: Admin page!\"\n\n@router.get(\"/lightwork\")\nasync def admin():\n    return f\"{server_name}: Doing light work!\"\n\n@router.get(\"/heavywork\")\nasync def heavywork():\n    return f\"{server_name}: Doing heavy work!\"\n\ndef create_app() -&gt; FastAPI:\n    app = FastAPI()\n    app.include_router(router)\n    return app\n\napp = create_app()\n</code></pre></p> </li> <li> <p>Add the following content to <code>Dockerfile</code>: <pre><code>FROM python:3.12.11-alpine3.22\n\nWORKDIR /app\nCOPY requirements.txt .\nRUN pip install -r requirements.txt\nCOPY . .\n\nCMD [\"fastapi\", \"run\", \"--host\", \"0.0.0.0\", \"--port\", \"8000\"]\n</code></pre></p> </li> <li> <p>Add the following content to <code>.dockerignore</code>: <pre><code>venv/\nDockerfile\n__pycache__/\n</code></pre></p> </li> </ol>"},{"location":"haproxy/haproxy/#create-haproxy-configuration","title":"Create HAProxy Configuration","text":"<ol> <li> <p>Create a <code>haproxy.cfg</code> file in the <code>haproxy</code> directory: <pre><code>mkdir haproxy\ncd haproxy\ntouch haproxy.cfg\n</code></pre></p> </li> <li> <p>Add the following content to <code>haproxy.cfg</code>: haproxy.cfg<pre><code>frontend clients\n    bind *:80\n    timeout client 60s\n\n    # Frontend mode should match the mode of the backend\n    mode http\n\n    # Use ACLs to route traffic based on the URL path\n    acl lightwork path_end -i /lightwork\n    acl heavywork path_end -i /heavywork\n\n    # Block traffic to /admin\n    http-request deny if { path -i -m beg /admin }\n\n    use_backend lightServers if lightwork\n    use_backend heavyServers if heavywork\n\n    default_backend servers\n\nbackend lightServers\n    timeout connect 10s\n    timeout server 10s\n\n    # Use same mode as frontend\n    mode http\n\n    server server1 server1:8000\n    server server2 server2:8000\n\nbackend heavyServers\n    # Longer timeouts for heavy work as it may take more time to process\n    timeout connect 10s\n    timeout server 120s\n\n    # Use same mode as frontend\n    mode http\n\n    # balance algorithm -&gt; default is roundrobin\n    # Suppose our heavy work servers are stateful\n    # We want to keep the session on the same server\n    balance source\n\n    server server3 server3:8000\n    server server4 server4:8000\n\nbackend servers\n    timeout connect 10s\n    timeout server 60s\n\n    # http operates at layer 7 (application layer)\n    mode http\n\n    server server1 server1:8000\n    server server2 server2:8000 \n    server server3 server3:8000\n    server server4 server4:8000\n</code></pre></p> </li> </ol>"},{"location":"haproxy/haproxy/#docker-compose-setup","title":"Docker Compose Setup","text":"<ol> <li>Create a <code>docker-compose.yml</code> file in the root directory <code>haproxy_docker</code>: docker-compose.yml<pre><code>services:\n  server1:\n    image: server:latest\n    build:\n      context: ./server\n      dockerfile: Dockerfile\n    ports:\n      - \"8001:8000\"\n    environment:\n      - SERVER_NAME=server1\n    container_name: server1\n\n  server2:\n    image: server:latest\n    build:\n      context: ./server\n      dockerfile: Dockerfile\n    ports:\n      - \"8002:8000\"\n    environment:\n      - SERVER_NAME=server2\n    container_name: server2\n\n  server3:\n    image: server:latest\n    build:\n      context: ./server\n      dockerfile: Dockerfile\n    ports:\n      - \"8003:8000\"\n    environment:\n      - SERVER_NAME=server3\n    container_name: server3\n\n  server4:\n    image: server:latest\n    build:\n      context: ./server\n      dockerfile: Dockerfile\n    ports:\n      - \"8004:8000\"\n    environment:\n      - SERVER_NAME=server4\n    container_name: server4\n\n  haproxy:\n    image: haproxy:latest\n    ports:\n      - \"8000:80\"\n    volumes:\n      - ./haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro\n    depends_on:\n      - server1\n      - server2\n      - server3\n      - server4\n    container_name: haproxy\n</code></pre></li> </ol>"},{"location":"haproxy/haproxy/#running-the-setup","title":"Running the Setup","text":"<ol> <li> <p>Start the services: <pre><code>docker compose up -d\n</code></pre></p> </li> <li> <p>Test the setup:</p> <ul> <li><code>server1</code>: http://localhost:8001/</li> <li><code>server2</code>: http://localhost:8002/</li> <li><code>server3</code>: http://localhost:8003/</li> <li><code>server4</code>: http://localhost:8004/</li> <li><code>HAProxy</code>: http://localhost:8000/</li> </ul> </li> <li> <p>Test the load balancing:</p> <ul> <li>Access the home page: http://localhost:8000/</li> <li>Access the light work page: http://localhost:8000/lightwork</li> <li>Access the heavy work page: http://localhost:8000/heavywork</li> <li>Access the admin page from HAProxy frontend client: http://localhost:8000/admin (should be blocked)</li> <li>Try admin page on each server: <ul> <li>http://localhost:8001/admin</li> <li>http://localhost:8002/admin, etc. (should be accessible)</li> </ul> </li> </ul> </li> <li> <p>Stop the services: <pre><code>docker compose down\n</code></pre></p> </li> </ol>"},{"location":"haproxy/haproxy/#conclusion","title":"Conclusion","text":"<p>HAProxy is extremely powerful for load balancing and proxying traffic. It supports various modes, ACLs, and load balancing algorithms, making it suitable for a wide range of applications. The example provided demonstrates how to set up HAProxy with multiple backend servers using Docker, showcasing its capabilities in a practical scenario.</p>"},{"location":"mongo/replication/","title":"Replication","text":"<p>Replication in MongoDB is a process of synchronizing data across multiple servers to ensure high availability and redundancy. It allows for automatic failover and data redundancy, which is crucial for maintaining the integrity and availability of data in distributed systems.</p>"},{"location":"mongo/replication/#benefits-of-replication","title":"Benefits of Replication","text":"<ul> <li>High Availability: If the primary server fails, one of the secondaries can be elected as the new primary.</li> <li>Data Redundancy: Data is stored on multiple servers, reducing the risk of data loss.</li> <li>Read Scalability: Read operations can be distributed across secondary servers, improving performance.</li> </ul>"},{"location":"mongo/replication/#replica-set","title":"Replica Set","text":"<p>A replica set is a group of MongoDB servers that maintain the same data set. It consists of:</p> <ul> <li>Primary: The server that receives all write operations.</li> <li>Secondary: The servers that replicate the primary's data and can serve read operations.</li> <li>Arbiter: An optional member that participates in elections but does not hold data.</li> </ul>"},{"location":"mongo/replication/#setting-up-a-replica-set-using-docker","title":"Setting Up a Replica Set using Docker","text":"<p>Source code: https://github.com/amritupreti/mongo/tree/replication</p>"},{"location":"mongo/replication/#project-structure","title":"Project Structure","text":"replication<pre><code>.\n\u251c\u2500\u2500 docker-compose.yml\n\u251c\u2500\u2500 replicaSet.js\n</code></pre>"},{"location":"mongo/replication/#replicasetjs","title":"replicaSet.js","text":"<p>Create a <code>replicaSet.js</code> file to initialize the replica set: replicaSet.js<pre><code>rs.initiate({\n  _id: \"rs0\",\n  members: [\n    { _id: 0, host: \"mongo1:27017\" },\n    { _id: 1, host: \"mongo2:27017\" },\n    { _id: 2, host: \"mongo3:27017\" }\n  ]\n})\n</code></pre></p> <p>Note: You can either use hostnames or IP addresses in the <code>host</code> field. Ensure that the hostnames are resolvable within your Docker network.</p>"},{"location":"mongo/replication/#docker-compose-configuration","title":"Docker Compose Configuration","text":"<p>Create a <code>docker-compose.yml</code> file with the following content: docker-compose.yml<pre><code>services:\n  # MongoDB replica set services\n  mongo1:\n    image: mongo:latest\n    command: mongod --replSet rs0     # rs0 is the name of the replica set\n    volumes:\n      - mongo1-data:/data/db          # Volume for data persistence\n    networks:\n      - mongoCluster                  # Network for communication\n    container_name: mongo1\n    restart: always\n\n  mongo2:\n    image: mongo:latest\n    command: mongod --replSet rs0\n    volumes:\n      - mongo2-data:/data/db\n    networks:\n      - mongoCluster\n    container_name: mongo2\n    restart: always\n\n  mongo3:\n    image: mongo:latest\n    command: mongod --replSet rs0\n    volumes:\n      - mongo3-data:/data/db \n    networks:\n      - mongoCluster\n    container_name: mongo3\n    restart: always\n\n  # Temporary service to initialize the replica set\n  # Exits after running the replicaSet.js script\n  mongo-init:\n    image: mongo:latest\n    volumes:\n      - ./replicaSet.js:/replicaSet.js:ro       # Read-only mount of the initialization script\n    networks:\n      - mongoCluster\n    command: [\"sh\", \"-c\", \"sleep 10 &amp;&amp; mongosh --host mongo1:27017 /replicaSet.js\"]\n    depends_on:\n      - mongo1\n      - mongo2\n      - mongo3\n    container_name: mongo-init\n\nvolumes:\n  mongo1-data:\n    name: mongo1-data\n    driver: local\n  mongo2-data:\n    name: mongo2-data\n    driver: local\n  mongo3-data:\n    name: mongo3-data\n    driver: local\nnetworks:\n  mongoCluster:\n    name: mongoCluster\n    driver: bridge\n</code></pre></p>"},{"location":"mongo/replication/#running-the-replica-set","title":"Running the Replica Set","text":"<ol> <li>Start the services: <pre><code>docker compose up -d\n</code></pre></li> </ol> <p>Note: The <code>mongo-init</code> service will run the <code>replicaSet.js</code> script to initialize the replica set and then exit.</p> <ol> <li> <p>Check the status of the replica set:</p> <ul> <li>Using <code>docker exec</code>: <pre><code>docker exec -it mongo1 mongosh --eval \"rs.status()\"\n</code></pre></li> <li>Using <code>mongosh</code> directly in one of the MongoDB containers: <pre><code>rs.status()\n</code></pre></li> </ul> </li> <li> <p>After initialization, add new members from the primary server:</p> <ul> <li>Ensure the new member is running and accessible.</li> <li>Using <code>docker exec</code> to add a new member: <pre><code>docker exec -it mongo1 mongosh --eval \"rs.add('mongo4:27017')\"\n</code></pre></li> <li>Using <code>mongosh</code> directly from the primary server: <pre><code>rs.add(\"mongo4:27017\")\n</code></pre></li> </ul> </li> </ol>"},{"location":"mongo/replication/#monitoring-replica-set","title":"Monitoring Replica Set","text":"<p>Monitor your replica set with <code>rs.status()</code>, which shows each member's state, health, and replication lag.</p>"},{"location":"mongo/replication/#conclusion","title":"Conclusion","text":"<p>MongoDB replication improves data availability and reliability. Setting up a replica set ensures your data remains accessible and protected against server failures\u2014crucial for production environments.</p>"},{"location":"mongo/sharding/","title":"Sharding","text":"<p>MongoDB sharding is a method of distributing data across multiple servers or nodes, known as \"shards\" to handle large datasets and high user concurrency effectively.</p>"},{"location":"mongo/sharding/#benefits-of-sharding","title":"Benefits of Sharding","text":"<ul> <li>Cost-effective scaling: Use standard, affordable hardware instead of investing in specialized, high-cost systems.</li> <li>Performance optimization: Tailor hardware and resources to the needs of individual collections for better efficiency.</li> <li>Increased resilience: Limit the impact of failures by containing them within individual shards.</li> <li>Operational simplicity: Adopt sharding gradually, minimizing disruption and complexity during scaling.</li> </ul> <p>For high-throughput workloads, rapidly growing datasets, multi-tenant applications, and global deployments, MongoDB sharding delivers sustainable scaling without the complexity traditionally associated with distributed databases. - MongoDB Sharding</p>"},{"location":"mongo/sharding/#when-to-choose-sharded-clusters","title":"When to choose Sharded Clusters","text":"<ul> <li>Large datasets: When your data exceeds the capacity of a single server.</li> <li>High throughput: When you need to handle a large number of read and write operations.</li> <li>Geographically distributed data: When you want to distribute data across multiple locations for better performance and availability.</li> <li>Scalability: When you anticipate significant growth in data volume or user load.</li> <li>Multi-tenant applications: When you need to isolate data for different tenants while maintaining a single database instance.</li> <li>High availability: When you require a system that can continue to operate even if some nodes fail.</li> </ul>"},{"location":"mongo/sharding/#how-to-distribute-workload","title":"How to distribute workload","text":"<p>There are two main approaches to distribute workload in MongoDB sharding:</p> <ol> <li> <p>Dedicated Shards: Move entire collections to specific shards based on their purpose or usage patterns.</p> </li> <li> <p>Collection Partitioning: Split a single collection across multiple shards using a shard key to distribute documents.</p> </li> </ol>"},{"location":"mongo/sharding/#sharding-architecture","title":"Sharding Architecture","text":"<p>MongoDB sharding architecture consists of the following components:</p> <ul> <li>Shards: The individual databases that store the data.</li> <li>Config Servers: Store metadata and configuration settings for the sharded cluster.</li> <li>Mongos: The query router that directs client requests to the appropriate shard based on the sharding key.</li> </ul>"},{"location":"mongo/sharding/#how-to-choose-a-shard-key","title":"How to choose a Shard Key","text":"<p>Choosing an effective shard key is crucial for optimal performance and scalability. Here are some guidelines:</p> <ul> <li>Cardinality: The shard key should have high cardinality, meaning it should have many unique values to ensure even distribution of data across shards.</li> <li>Query Patterns: Consider the most common query patterns. The shard key should align with these patterns to minimize cross-shard queries.</li> <li>Write Distribution: Ensure that the shard key allows for balanced write operations across shards to avoid hotspots.</li> <li>Avoid Monotonic Keys: Avoid using monotonically increasing keys (like timestamps) as shard keys, as they can lead to uneven data distribution.</li> <li>Experiment: Pick a shard key based on your data and workload characteristics, and test its performance.</li> </ul>"},{"location":"mongo/sharding/#sharding-example-using-docker","title":"Sharding Example Using Docker","text":""},{"location":"mongo/sharding/#project-structure","title":"Project Structure","text":"<p>Source code: https://github.com/amritupreti/mongo/tree/sharding</p> <p>Here's the project structure for setting up a MongoDB sharded cluster using Docker: sharding<pre><code>.\n\u251c\u2500\u2500 cfgsvr\n\u2502   \u251c\u2500\u2500 docker-compose.yml\n\u251c\u2500\u2500 shard1\n\u2502   \u251c\u2500\u2500 docker-compose.yml\n\u251c\u2500\u2500 shard2\n\u2502   \u251c\u2500\u2500 docker-compose.yml\n\u251c\u2500\u2500 shard3\n\u2502   \u251c\u2500\u2500 docker-compose.yml\n\u2514\u2500\u2500 mongos\n    \u2514\u2500\u2500 docker-compose.yml\n</code></pre></p> <p>I'll be creating a network named <code>mongoCluster</code>, <code>config server</code> with <code>3 replicas</code>, <code>3 shards</code> with <code>3 replicas</code> each, and a <code>mongos router</code>.</p>"},{"location":"mongo/sharding/#create-a-docker-network","title":"Create a Docker Network","text":"<pre><code>docker network create mongoCluster \n</code></pre>"},{"location":"mongo/sharding/#config-server","title":"Config Server","text":""},{"location":"mongo/sharding/#create-config-server","title":"Create Config Server","text":"<p>Create a <code>docker-compose.yml</code> file in the <code>cfgsvr</code> directory: <pre><code>mkdir cfgsvr\ncd cfgsvr\ntouch docker-compose.yml\n</code></pre></p> <p>Define the <code>docker-compose.yml</code> file as follows: cfgsvr/docker-compose.yml<pre><code>services:\n  cfgsvr1:\n      image: mongo:latest\n      command: mongod --configsvr --replSet cfgrs --port 27017 --dbpath /data/db\n      volumes:\n        - cfgsvr1:/data/configdb\n      networks:\n        - mongoCluster\n      container_name: cfgsvr1\n      healthcheck:\n        test: [\"CMD\", \"mongosh\", \"--host\", \"cfgsvr1:27017\", \"--eval\", \"db.adminCommand('ping')\"]\n        interval: 30s\n        timeout: 10s\n        retries: 5\n  cfgsvr2:\n    image: mongo:latest\n    command: mongod --configsvr --replSet cfgrs --port 27017 --dbpath /data/db\n    volumes:\n      - cfgsvr2:/data/configdb\n    networks:\n      - mongoCluster\n    container_name: cfgsvr2\n    healthcheck:\n      test: [\"CMD\", \"mongosh\", \"--host\", \"cfgsvr2:27017\", \"--eval\", \"db.adminCommand('ping')\"]\n      interval: 30s\n      timeout: 10s\n      retries: 5\n  cfgsvr3:\n    image: mongo:latest\n    command: mongod --configsvr --replSet cfgrs --port 27017 --dbpath /data/db\n    volumes:\n      - cfgsvr3:/data/configdb\n    networks:\n      - mongoCluster  \n    container_name: cfgsvr3\n    healthcheck:\n      test: [\"CMD\", \"mongosh\", \"--host\", \"cfgsvr3:27017\", \"--eval\", \"db.adminCommand('ping')\"]\n      interval: 30s\n      timeout: 10s\n      retries: 5\n\nvolumes:\n  cfgsvr1:\n  cfgsvr2:\n  cfgsvr3:  \nnetworks:\n  mongoCluster:\n    driver: bridge\n    name: mongoCluster\n    external: true\n</code></pre></p>"},{"location":"mongo/sharding/#start-config-server","title":"Start Config Server","text":"<p>Run the following command in the <code>cfgsvr</code> directory to start the config server: <pre><code>docker compose up -d\n</code></pre></p>"},{"location":"mongo/sharding/#initialize-replica-set","title":"Initialize Replica Set","text":"<ol> <li> <p>Login to one of the config server containers: <pre><code>docker exec -it cfgsvr1 mongosh\n</code></pre></p> </li> <li> <p>Run the following command to initialize the replica set: cfgsvr/replicaSet.js<pre><code>rs.initiate({\n  _id: \"cfgrs\",\n  configsvr: true,\n  members: [\n    { _id: 0, host: \"cfgsvr1:27017\" },\n    { _id: 1, host: \"cfgsvr2:27017\" },\n    { _id: 2, host: \"cfgsvr3:27017\" }\n  ]\n})\n</code></pre></p> </li> <li> <p>Check the status of the replica set, it takes a few seconds for the replica set to elect a primary node.     <pre><code>rs.status()\n</code></pre></p> </li> </ol> <p>NOTE: Notice, we are using hostname <code>cfgsvr1</code>, <code>cfgsvr2</code>, and <code>cfgsvr3</code>. It will be resolved by Docker's internal DNS since all the services are in the same network <code>mongoCluster</code>.</p>"},{"location":"mongo/sharding/#shards","title":"Shards","text":""},{"location":"mongo/sharding/#create-shards","title":"Create Shards","text":"<p>Here's how to create each shard with 3 replicas. The process is similar for <code>shard2</code> and <code>shard3</code>, just change the names accordingly.</p> <p>Change to <code>project directory</code> and create a <code>docker-compose.yml</code> file in the <code>shard1</code> directory: <pre><code>mkdir shard1\ncd shard1\ntouch docker-compose.yml\n</code></pre></p> <p>Define the <code>docker-compose.yml</code> file as follows: shard1/docker-compose.yml<pre><code>services:\n  shard1svr1:\n    image: mongo:latest\n    command: mongod --shardsvr --replSet shard1rs --port 27017 --dbpath /data/db \n    volumes:\n      - shard1svr1:/data/db\n    networks:\n      - mongoCluster\n    container_name: shard1svr1\n    healthcheck:\n      test: [\"CMD\", \"mongosh\", \"--host\", \"shard1svr1:27017\", \"--eval\", \"db.adminCommand('ping')\"]\n      interval: 30s\n      timeout: 10s\n      retries: 5\n\n  shard1svr2:\n    image: mongo:latest\n    command: mongod --shardsvr --replSet shard1rs --port 27017 --dbpath /data/db\n    volumes:\n      - shard1svr2:/data/db\n    networks:\n      - mongoCluster\n    container_name: shard1svr2\n    healthcheck:\n      test: [\"CMD\", \"mongosh\", \"--host\", \"shard1svr2:27017\", \"--eval\", \"db.adminCommand('ping')\"]\n      interval: 30s\n      timeout: 10s\n      retries: 5\n\n  shard1svr3:\n    image: mongo:latest\n    command: mongod --shardsvr --replSet shard1rs --port 27017 --dbpath /data/db\n    volumes:\n      - shard1svr3:/data/db \n    networks:\n      - mongoCluster\n    container_name: shard1svr3\n    healthcheck:\n      test: [\"CMD\", \"mongosh\", \"--host\", \"shard1svr3:27017\", \"--eval\", \"db.adminCommand('ping')\"]\n      interval: 30s\n      timeout: 10s\n      retries: 5\n\nvolumes:\n  shard1svr1:\n  shard1svr2:\n  shard1svr3:\nnetworks:\n  mongoCluster:\n    driver: bridge\n    name: mongoCluster\n    external: true\n</code></pre></p>"},{"location":"mongo/sharding/#start-shards","title":"Start Shards","text":"<p>Run the following command in the <code>shard1</code> directory to start the first shard: <pre><code>docker compose up -d\n</code></pre></p> <p>Repeat the same for <code>shard2</code> and <code>shard3</code> by changing the shard name and container names accordingly.</p>"},{"location":"mongo/sharding/#initialize-replica-set-for-shard","title":"Initialize Replica Set for Shard","text":"<ol> <li> <p>Login to one of the shard containers: <pre><code>docker exec -it shard1svr1 mongosh\n</code></pre></p> </li> <li> <p>Run the following command to initialize the replica set: shard1/replicaSet.js<pre><code>rs.initiate({\n  _id: \"shard1rs\",\n  members: [\n    { _id: 0, host: \"shard1svr1:27017\" },\n    { _id: 1, host: \"shard1svr2:27017\" },\n    { _id: 2, host: \"shard1svr3:27017\" }\n  ]\n})\n</code></pre></p> </li> <li> <p>Check the status of the replica set: <pre><code>rs.status()\n</code></pre></p> </li> </ol> <p>NOTE: For <code>shard2</code> and <code>shard3</code>, change the replica set name and hostnames accordingly.</p>"},{"location":"mongo/sharding/#mongos-router","title":"Mongos Router","text":""},{"location":"mongo/sharding/#create-mongos-router","title":"Create Mongos Router","text":"<p>Change to <code>project directory</code> and create a <code>docker-compose.yml</code> file in the <code>mongos</code> directory: <pre><code>mkdir mongos\ncd mongos\ntouch docker-compose.yml\n</code></pre></p> <p>Define the <code>docker-compose.yml</code> file as follows: mongos/docker-compose.yml<pre><code>services:\n  mongos:\n    image: mongo:latest\n    command: mongos --configdb cfgrs/cfgsvr1:27017,cfgsvr2:27017,cfgsvr3:27017 --bind_ip 0.0.0.0 --port 27017\n    ports:\n      - \"27017:27017\"\n    networks:\n      - mongoCluster\n    container_name: mongos\n    restart: always  \nnetworks:\n  mongoCluster:\n    driver: bridge\n    name: mongoCluster\n    external: true\n</code></pre></p>"},{"location":"mongo/sharding/#start-mongos-router","title":"Start Mongos Router","text":"<p>Run the following command in the <code>mongos</code> directory to start the mongos router: <pre><code>docker compose up -d\n</code></pre></p>"},{"location":"mongo/sharding/#check-shard-status","title":"Check Shard Status","text":"<p>You can check the status of the sharded cluster using the following command: <pre><code>docker exec -it mongos mongosh --eval \"sh.listShards()\"\n</code></pre></p>"},{"location":"mongo/sharding/#add-shards-to-the-cluster","title":"Add Shards to the Cluster","text":"<p>You need to add each shard to the sharded cluster. To add <code>shard1</code>, run the following command: <pre><code>docker exec -it mongos mongosh --eval \"sh.addShard('shard1rs/shard1svr1:27017,shard1svr2:27017,shard1svr3:27017')\"\n</code></pre></p> <p>Repeat the same for <code>shard2</code> and <code>shard3</code> by changing the shard name and container names accordingly.</p>"},{"location":"mongo/sharding/#sharding-a-collection","title":"Sharding a Collection","text":"<p>Let's create a db named <code>imdb</code> and a collection named <code>movies</code>. We'll use the <code>title</code> field as the shard key.</p> <ol> <li> <p>Connect to the <code>mongos</code> router:    <pre><code>docker exec -it mongos mongosh\n</code></pre></p> </li> <li> <p>Create the <code>imdb</code> database and switch to it:    <pre><code>use imdb\n</code></pre></p> </li> <li> <p>Create the <code>movies</code> collection:    <code>javascript     db.createCollection(\"movies\")</code></p> </li> <li> <p>Enable sharding for the <code>imdb</code> database:    <pre><code>sh.enableSharding(\"imdb\")\n</code></pre></p> </li> <li> <p>Shard the <code>movies</code> collection using the <code>title</code> field as the shard key:    <pre><code>sh.shardCollection(\"imdb.movies\", { \"title\": \"hashed\" })\n</code></pre></p> </li> <li> <p>Insert some sample data into the <code>movies</code> collection:    <pre><code>db.movies.insertMany([\n  { title: \"Inception\", year: 2010, genre: \"Sci-Fi\" },\n  { title: \"The Dark Knight\", year: 2008, genre: \"Action\" },\n  { title: \"Interstellar\", year: 2014, genre: \"Sci-Fi\" },\n  { title: \"The Matrix\", year: 1999, genre: \"Sci-Fi\" },\n  { title: \"Pulp Fiction\", year: 1994, genre: \"Crime\" },\n  { title: \"The Shawshank Redemption\", year: 1994, genre: \"Drama\" },\n  { title: \"The Godfather\", year: 1972, genre: \"Crime\" },\n  { title: \"Forrest Gump\", year: 1994, genre: \"Drama\" },\n  { title: \"The Lord of the Rings: The Return of the King\", year: 2003, genre: \"Fantasy\" },\n  { title: \"Fight Club\", year: 1999, genre: \"Drama\" }\n])\n</code></pre></p> </li> <li> <p>Verify the sharding status of the <code>movies</code> collection:    <pre><code>db.movies.getShardDistribution()\n</code></pre></p> </li> <li> <p>Check the data distribution across shards:    <pre><code>sh.status()\n</code></pre></p> </li> </ol>"},{"location":"mongo/sharding/#conclusion","title":"Conclusion","text":"<p>MongoDB sharding enables horizontal scaling by distributing data across multiple servers. With the right shard key and setup, you can efficiently manage large datasets and high concurrency. This guide covers a basic Docker-based sharded cluster, which you can adapt to your needs.</p>"},{"location":"vim/vim/","title":"Vim","text":"<p>Vim is a highly efficient, keyboard-driven text editor known for its modal editing approach. Unlike traditional editors, Vim uses different modes for different tasks \u2014 making navigation and editing fast once you get used to it.</p>"},{"location":"vim/vim/#getting-started","title":"Getting Started","text":"<ul> <li>Exit Vim:  </li> <li><code>:q</code> \u2192 Quit  </li> <li><code>:wq</code> \u2192 Save and quit  </li> <li> <p><code>:q!</code> \u2192 Quit without saving</p> </li> <li> <p>Help:  </p> </li> <li><code>:help</code> or <code>:h keyword</code> \u2192 Open Vim's built-in documentation  </li> <li> <p><code>K</code> \u2192 Open the man page for the word under the cursor</p> </li> <li> <p>Open Terminal:  </p> </li> <li><code>:terminal</code> \u2192 Open a terminal window within Vim</li> </ul>"},{"location":"vim/vim/#saving-default-settings","title":"Saving default settings","text":"<p>To save your custom settings, create or edit the <code>.vimrc</code> file in your home directory:</p> <pre><code>\" Example .vimrc settings\nset number          \" Show line numbers\nset relativenumber  \" Show relative line numbers\nset tabstop=4       \" Set tab width to 4 spaces\nset shiftwidth=4    \" Set indentation width to 4 spaces\nset expandtab       \" Use spaces instead of tabs\nset autoindent      \" Enable automatic indentation\nset smartindent     \" Enable smart indentation\nset hlsearch        \" Highlight search results\nset incsearch       \" Incremental search\nset ignorecase      \" Ignore case in searches\nset smartcase       \" Override ignorecase if uppercase letters are used\nset clipboard=unnamedplus \" Use system clipboard\nset mouse=a         \" Enable mouse support\nset cursorline      \" Highlight the current line\nset background=dark \" Set background to dark for better contrast\nsyntax on           \" Enable syntax highlighting\n</code></pre>"},{"location":"vim/vim/#modes-in-vim","title":"Modes in Vim","text":"<p>Vim uses different modes for different tasks. Understanding these is key to using Vim efficiently:</p> Mode Purpose How to Enter Normal Navigate, edit, and run commands <code>Esc</code> Insert Type and insert text <code>i</code>, <code>I</code>, <code>a</code>, <code>A</code>, <code>o</code>, <code>O</code> Visual Select and manipulate text <code>v</code> (character), <code>V</code> (line), <code>Ctrl+v</code> (block) Command-line Run commands (save, search, etc.) <code>:</code> (from Normal mode)"},{"location":"vim/vim/#cursor-movement","title":"Cursor Movement","text":""},{"location":"vim/vim/#basic-navigation","title":"Basic Navigation","text":"<ul> <li><code>h</code>, <code>j</code>, <code>k</code>, <code>l</code> \u2192 Move left, down, up, right</li> <li><code>gj</code>, <code>gk</code> \u2192 Move by screen line in wrapped text</li> <li><code>0</code> \u2192 Start of line  </li> <li><code>^</code> \u2192 First non-blank character  </li> <li><code>$</code> \u2192 End of line  </li> <li><code>g_</code> \u2192 Last non-blank character of the line  </li> <li><code>H</code>, <code>M</code>, <code>L</code> \u2192 Top, middle, bottom of screen  </li> <li><code>zz</code>, <code>zt</code>, <code>zb</code> \u2192 Center, top, bottom the current line on screen  </li> </ul>"},{"location":"vim/vim/#word-navigation","title":"Word Navigation","text":"<ul> <li><code>w</code>, <code>W</code> \u2192 Next word (W ignores punctuation)  </li> <li><code>e</code>, <code>E</code> \u2192 End of word (E ignores punctuation)  </li> <li><code>b</code>, <code>B</code> \u2192 Previous word (B ignores punctuation)  </li> <li><code>ge</code>, <code>gE</code> \u2192 End of previous word  </li> </ul>"},{"location":"vim/vim/#paragraph-block-movement","title":"Paragraph / Block Movement","text":"<ul> <li><code>{</code>, <code>}</code> \u2192 Move to previous/next paragraph (or code block)</li> </ul>"},{"location":"vim/vim/#character-search","title":"Character Search","text":"<ul> <li><code>fx</code>, <code>Fx</code> \u2192 Find next/previous occurrence of character <code>x</code> </li> <li><code>tx</code>, <code>Tx</code> \u2192 Move right/left before character <code>x</code> </li> <li><code>;</code>, <code>,</code> \u2192 Repeat last <code>f</code>, <code>t</code>, <code>F</code>, <code>T</code> in same or opposite direction</li> </ul>"},{"location":"vim/vim/#line-navigation","title":"Line Navigation","text":"<ul> <li><code>gg</code> \u2192 Go to first line  </li> <li><code>G</code> \u2192 Go to last line  </li> <li><code>5gg</code> or <code>5G</code> \u2192 Go to line 5  </li> <li><code>gd</code>, <code>gD</code> \u2192 Go to local/global declaration  </li> <li><code>%</code> \u2192 Jump to matching bracket ( (), {}, [] )</li> </ul>"},{"location":"vim/vim/#scrolling","title":"Scrolling","text":"<ul> <li><code>Ctrl+e</code>, <code>Ctrl+y</code> \u2192 Scroll screen down/up by one line (without moving cursor)</li> <li><code>Ctrl+f</code>, <code>Ctrl+b</code> \u2192 Page forward/back</li> <li><code>Ctrl+d</code>, <code>Ctrl+u</code> \u2192 Half-page down/up</li> </ul>"},{"location":"vim/vim/#insert-mode","title":"Insert Mode","text":"<p>To enter insert mode, use:</p> <ul> <li><code>i</code>, <code>I</code> \u2192 Insert before cursor / at start of line  </li> <li><code>a</code>, <code>A</code> \u2192 Append after cursor / at end of line  </li> <li><code>o</code>, <code>O</code> \u2192 Open new line below / above  </li> <li><code>ea</code> \u2192 Insert at end of current word  </li> </ul> <p>While in insert mode:</p> <ul> <li><code>Ctrl+h</code> \u2192 Delete character before cursor  </li> <li><code>Ctrl+w</code> \u2192 Delete word before cursor  </li> <li><code>Ctrl+j</code> \u2192 Line break  </li> <li><code>Ctrl+t</code> / <code>Ctrl+d</code> \u2192 Indent / de-indent  </li> <li><code>Ctrl+n</code>, <code>Ctrl+p</code> \u2192 Autocomplete next / previous suggestion  </li> <li><code>Ctrl+r{register}</code> \u2192 Insert contents of a register  </li> <li><code>Ctrl+o{cmd}</code> \u2192 Temporarily run Normal-mode command  </li> </ul> <p>Exit insert mode with <code>Esc</code> or <code>Ctrl+c</code>.</p>"},{"location":"vim/vim/#editing-text","title":"Editing Text","text":"<ul> <li><code>r</code>, <code>R</code> \u2192 Replace one or many characters  </li> <li><code>J</code>, <code>gJ</code> \u2192 Join lines with or without space  </li> <li><code>xp</code> \u2192 Swap two characters  </li> <li><code>u</code>, <code>U</code> \u2192 Undo last change / entire line  </li> <li><code>Ctrl+r</code> \u2192 Redo  </li> <li><code>.</code> \u2192 Repeat last command  </li> </ul>"},{"location":"vim/vim/#change-commands","title":"Change Commands","text":"<ul> <li><code>cc</code> \u2192 Change (replace) entire line  </li> <li><code>c$</code> or <code>C</code> \u2192 Change to end of line  </li> <li><code>ciw</code> \u2192 Change inner word  </li> <li><code>cw</code>, <code>ce</code> \u2192 Change to end of word  </li> </ul>"},{"location":"vim/vim/#substitution","title":"Substitution","text":"<ul> <li><code>s</code>, <code>S</code> \u2192 Substitute character / line  </li> <li><code>gwip</code> \u2192 Reformat a paragraph (like wrapping)  </li> <li><code>g~</code>, <code>gu</code>, <code>gU</code> \u2192 Toggle / lowercase / uppercase with motion</li> </ul>"},{"location":"vim/vim/#visual-mode","title":"Visual Mode","text":"<p>Used for selecting and manipulating text.</p> <ul> <li><code>v</code>, <code>V</code>, <code>Ctrl+v</code> \u2192 Character, line, block selection  </li> <li><code>o</code> / <code>O</code> \u2192 Jump to other end/corner of selection  </li> <li><code>&gt;</code>, <code>&lt;</code> \u2192 Indent / de-indent selected text  </li> <li><code>y</code>, <code>d</code>, <code>~</code>, <code>u</code>, <code>U</code> \u2192 Yank, delete, toggle case, lowercase, uppercase  </li> <li><code>aw</code>, <code>ab</code>, <code>aB</code>, <code>ib</code>, <code>iB</code> \u2192 Text objects (word, block with brackets, etc.)</li> </ul> <p>Exit visual mode with <code>Esc</code> or <code>Ctrl+c</code>.</p>"},{"location":"vim/vim/#registers","title":"Registers","text":"<ul> <li><code>:registers</code> \u2192 List all available registers  </li> <li><code>\"xy</code>, <code>\"xp</code> \u2192 Copy to / paste from register x  </li> <li><code>\"+y</code>, <code>\"+p</code> \u2192 Use system clipboard  </li> <li><code>\"0</code> \u2192 Last yank  </li> <li><code>\"*</code>, `\"+\" \u2192 X11 clipboard registers  </li> </ul> <p>Special registers include: - <code>\"</code> \u2192 Unnamed - <code>%</code> \u2192 Current file - <code>/</code> \u2192 Last search - <code>:</code> \u2192 Last command - <code>.</code> \u2192 Last inserted text</p>"},{"location":"vim/vim/#marks-and-jumps","title":"Marks and Jumps","text":"<ul> <li><code>ma</code> \u2192 Set mark 'a' at current location  </li> <li><code>`a</code> \u2192 Jump to mark 'a'  </li> <li><code>`.</code> \u2192 Jump to last change  </li> <li><code>`\"</code> \u2192 Jump to last edited file position  </li> <li><code>:marks</code>, <code>:jumps</code>, <code>:changes</code> \u2192 Show history  </li> <li><code>Ctrl+o</code>, <code>Ctrl+i</code> \u2192 Go to older/newer jump  </li> <li><code>g;</code>, <code>g,</code> \u2192 Older/newer change  </li> <li><code>Ctrl+]</code> \u2192 Jump to tag under cursor (requires ctags)</li> </ul>"},{"location":"vim/vim/#macros","title":"Macros","text":"<ul> <li><code>qa</code> \u2192 Start recording macro into register <code>a</code> </li> <li><code>q</code> \u2192 Stop recording  </li> <li><code>@a</code> \u2192 Run macro in register <code>a</code> </li> <li><code>@@</code> \u2192 Rerun last macro</li> </ul>"},{"location":"vim/vim/#copy-cut-paste","title":"Copy, Cut, Paste","text":""},{"location":"vim/vim/#yank-copy","title":"Yank (Copy)","text":"<ul> <li><code>yy</code>, <code>2yy</code> \u2192 Yank 1 or 2 lines  </li> <li><code>yw</code>, <code>yiw</code> \u2192 Yank word / inner word  </li> <li><code>y$</code>, <code>Y</code> \u2192 Yank to end of line  </li> <li><code>yaw</code> \u2192 Yank word with surrounding space</li> </ul>"},{"location":"vim/vim/#delete-cut","title":"Delete (Cut)","text":"<ul> <li><code>dd</code>, <code>2dd</code> \u2192 Delete 1 or 2 lines  </li> <li><code>dw</code>, <code>diw</code>, <code>daw</code> \u2192 Delete word, inner word, or word with space  </li> <li><code>x</code> \u2192 Delete character under cursor  </li> <li><code>D</code> \u2192 Delete to end of line  </li> <li><code>:3,5d</code> \u2192 Delete lines 3 to 5  </li> <li><code>:g/pattern/d</code> \u2192 Delete all lines matching pattern  </li> <li><code>:g!/pattern/d</code> \u2192 Delete lines NOT matching pattern</li> </ul>"},{"location":"vim/vim/#paste","title":"Paste","text":"<ul> <li><code>p</code>, <code>P</code> \u2192 Paste after / before cursor  </li> <li><code>gp</code>, <code>gP</code> \u2192 Paste and leave cursor after new text</li> </ul>"},{"location":"vim/vim/#indentation","title":"Indentation","text":"<ul> <li><code>&gt;&gt;</code>, <code>&lt;&lt;</code> \u2192 Indent / de-indent current line  </li> <li><code>&gt;%</code>, <code>&lt;%</code> \u2192 Indent / de-indent code block  </li> <li><code>&gt;ib</code>, <code>&gt;at</code> \u2192 Indent inside block or tag  </li> <li><code>gg=G</code> \u2192 Re-indent entire file  </li> <li><code>3==</code> \u2192 Re-indent 3 lines  </li> <li><code>]p</code> \u2192 Paste and auto-indent</li> </ul>"},{"location":"vim/vim/#search-and-replace","title":"Search and Replace","text":"<ul> <li><code>/pattern</code> \u2192 Search forward  </li> <li><code>?pattern</code> \u2192 Search backward  </li> <li><code>n</code>, <code>N</code> \u2192 Next / previous match  </li> <li><code>:noh</code> \u2192 Clear highlight  </li> <li><code>:%s/old/new/g</code> \u2192 Replace all  </li> <li><code>:%s/old/new/gc</code> \u2192 Confirm each replacement</li> </ul>"},{"location":"vim/vim/#search-multiple-files","title":"Search Multiple Files","text":"<ul> <li><code>:vimgrep /pattern/ **/*</code> \u2192 Search recursively  </li> <li><code>:cn</code>, <code>:cp</code> \u2192 Jump to next / previous match  </li> <li><code>:copen</code>, <code>:cclose</code> \u2192 Open / close quickfix list</li> </ul>"},{"location":"vim/vim/#tabs","title":"Tabs","text":"<ul> <li><code>:tabnew</code> \u2192 Open new tab  </li> <li><code>gt</code>, <code>gT</code> \u2192 Next / previous tab  </li> <li><code>:tabm 2</code> \u2192 Move current tab to position 2  </li> <li><code>:tabclose</code>, <code>:tabonly</code> \u2192 Close tabs  </li> <li><code>:tabdo command</code> \u2192 Run command in all tabs</li> </ul>"},{"location":"vim/vim/#buffers-and-files","title":"Buffers and Files","text":"<ul> <li><code>:e file.txt</code> \u2192 Edit a file  </li> <li><code>:bnext</code>, <code>:bprev</code> \u2192 Next / previous buffer  </li> <li><code>:bd</code> \u2192 Close buffer  </li> <li><code>:ls</code>, <code>:buffers</code> \u2192 List buffers  </li> <li><code>:b 2</code> \u2192 Switch to buffer 2  </li> <li><code>:b filename</code> \u2192 Switch by file name</li> </ul>"},{"location":"vim/vim/#windows-and-splits","title":"Windows and Splits","text":"<ul> <li><code>:split file</code> \u2192 Horizontal split  </li> <li><code>:vsplit file</code> \u2192 Vertical split  </li> <li><code>Ctrl+ws</code>, <code>Ctrl+wv</code> \u2192 Create horizontal / vertical split  </li> <li><code>Ctrl+ww</code> \u2192 Switch window  </li> <li><code>Ctrl+wq</code>, <code>Ctrl+wx</code>, <code>Ctrl+w=</code> \u2192 Close, exchange, equal size  </li> <li><code>Ctrl+wh</code>, <code>Ctrl+wl</code>, <code>Ctrl+wj</code>, <code>Ctrl+wk</code> \u2192 Move between splits  </li> <li><code>Ctrl+wH</code>, <code>Ctrl+wL</code>, <code>Ctrl+wJ</code>, <code>Ctrl+wK</code> \u2192 Rearrange windows</li> </ul>"},{"location":"vim/vim/#save-and-exit","title":"Save and Exit","text":"<ul> <li><code>:w</code> \u2192 Save file  </li> <li><code>:wq</code>, <code>:x</code>, <code>ZZ</code> \u2192 Save and quit  </li> <li><code>:q</code> \u2192 Quit  </li> <li><code>:q!</code>, <code>ZQ</code> \u2192 Quit without saving  </li> <li><code>:wqa</code> \u2192 Save and quit all files  </li> <li><code>:w !sudo tee %</code> \u2192 Save with elevated permissions</li> </ul>"}]}